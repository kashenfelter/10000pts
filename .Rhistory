y2 <- y1 + v[2] / v_mag * (r1 + r2)
alpha <- acos((x1 * x2 + y1 * y2) / (sqrt((x1+0.00001)^2 + y1^2) * sqrt(x2^2 + y2^2))) * 180 / pi
temp3 <- df %>% mutate(d = sqrt((x2 - x)^2 + (y2 - y)^2),
rad = r + r2,
check = ifelse(d < rad, 1, 0))
if (sum(temp3$check) <= 0) {
valid <- 1
df <- df %>% rbind(c(x2, y2, r2, 1, 0, i+1))
df$marked[df$frame == frame] <- df$marked[df$frame == frame] + 1
edges <- edges %>% rbind(c(x1, x2, y1, y2))
}
}
}
print(i)
}
# create plot ----
ggplot() +
geom_segment(aes(x = x, xend = xend, y = y, yend = yend), edges %>% filter (x != xend),
size = 0.35) +
#geom_point(aes(x, y), edges %>% filter (x != xend), size = 0.5, colour = "#253494") +
#geom_circle(aes(x0 = x, y0 = y, r = r), df) +
coord_equal() +
theme_blankcanvas
# save plot ----
ggsave("genbrain-multi-3.png", width = 24, height = 14, units = "cm", dpi = 300)
# load packages ----
library(dplyr)
library(ggforce)
library(ggplot2) # requires development version
# plotting theme ----
theme_blankcanvas <- theme(
axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
axis.line = element_blank(),
legend.position = "none",
panel.background = element_rect(fill = "transparent"),
panel.border = element_blank(),
panel.grid = element_blank(),
plot.background = element_rect(fill = "transparent", colour = "transparent"),
plot.margin = unit(c(0, 0, -1, -1), "mm"), # top, right, bottom, left
strip.background = element_blank(),
strip.text = element_blank()
)
# preliminaries ----
set.seed(110) # make reproducible
# set up data frames
df <- data.frame(x = c(0, 500, 500, 0), y = c(0, 0, 500, 500), r = 1, c = 1, marked = 0, frame = 1)
edges <- data.frame(x = 0, xend = 0, y = 0, yend = 0)
# parameters
n <- 100000
p <- 0.5
m <- 1
v <- c(runif(1, -1), runif(1, -1))
# main algorithm ----
for (i in seq(1, n)) {
if (runif(1) <= p) {
m <- m + 1
df <- df %>% rbind(c(runif(1), runif(1), runif(1), m, 0, i+1))
} else {
valid <- 0
while (valid < 1) {
temp <- sample_n(df %>% filter(marked < 3), 1)
frame <- temp$frame[1]
x1 <- temp$x[1]
y1 <- temp$y[1]
r1 <- temp$r[1]
r2 <- ifelse(runif(1) <= p, runif(1, 0, 10), runif(1, 0.5, 1))
#r2 <- 1
v <- v + c(runif(1, -1), runif(1, -1))
v_mag <- sqrt(v[1]^2 + v[2]^2)
x2 <- x1 + v[1] / v_mag * (r1 + r2)
y2 <- y1 + v[2] / v_mag * (r1 + r2)
alpha <- acos((x1 * x2 + y1 * y2) / (sqrt((x1+0.00001)^2 + y1^2) * sqrt(x2^2 + y2^2))) * 180 / pi
temp3 <- df %>% mutate(d = sqrt((x2 - x)^2 + (y2 - y)^2),
rad = r + r2,
check = ifelse(d < rad, 1, 0))
if (sum(temp3$check) <= 0) {
valid <- 1
df <- df %>% rbind(c(x2, y2, r2, 1, 0, i+1))
df$marked[df$frame == frame] <- df$marked[df$frame == frame] + 1
edges <- edges %>% rbind(c(x1, x2, y1, y2))
}
}
}
print(i)
}
ggplot() +
geom_segment(aes(x = x, xend = xend, y = y, yend = yend), edges %>% filter (x != xend),
size = 0.35) +
#geom_point(aes(x, y), edges %>% filter (x != xend), size = 0.5, colour = "#253494") +
#geom_circle(aes(x0 = x, y0 = y, r = r), df) +
coord_equal() +
theme_blankcanvas
# save plot ----
ggsave("genbrain-multi-4.png", width = 24, height = 14, units = "cm", dpi = 300)
ggsave("genbrain-multi-4.png", width = 24, height = 24, units = "cm", dpi = 300)
ggplot() +
geom_segment(aes(x = x, xend = xend, y = y, yend = yend), edges %>% filter (x != xend),
size = 0.35) +
#geom_point(aes(x, y), edges %>% filter (x != xend), size = 0.5, colour = "#253494") +
#geom_circle(aes(x0 = x, y0 = y, r = r), df) +
coord_equal()
ggplot() +
geom_segment(aes(x = x, xend = xend, y = y, yend = yend), edges %>% filter (x != xend),
size = 0.35) +
#geom_point(aes(x, y), edges %>% filter (x != xend), size = 0.5, colour = "#253494") +
#geom_circle(aes(x0 = x, y0 = y, r = r), df) +
coord_equal() + xlim(-100, 250) + ylim(-250, 325)
ggplot() +
geom_segment(aes(x = x, xend = xend, y = y, yend = yend), edges %>% filter (x != xend),
size = 0.35) +
#geom_point(aes(x, y), edges %>% filter (x != xend), size = 0.5, colour = "#253494") +
#geom_circle(aes(x0 = x, y0 = y, r = r), df) +
coord_equal() + xlim(-100, 250) + ylim(-200, 325)
theme_blankcanvas
ggplot() +
geom_segment(aes(x = x, xend = xend, y = y, yend = yend), edges %>% filter (x != xend),
size = 0.35) +
#geom_point(aes(x, y), edges %>% filter (x != xend), size = 0.5, colour = "#253494") +
#geom_circle(aes(x0 = x, y0 = y, r = r), df) +
coord_equal() + xlim(-100, 250) + ylim(-175, 325)
ggplot() +
geom_segment(aes(x = x, xend = xend, y = y, yend = yend), edges %>% filter (x != xend),
size = 0.35) +
#geom_point(aes(x, y), edges %>% filter (x != xend), size = 0.5, colour = "#253494") +
#geom_circle(aes(x0 = x, y0 = y, r = r), df) +
coord_equal() + xlim(-100, 250) + ylim(-175, 325)
theme_blankcanvas
ggplot() +
geom_segment(aes(x = x, xend = xend, y = y, yend = yend), edges %>% filter (x != xend),
size = 0.35) +
#geom_point(aes(x, y), edges %>% filter (x != xend), size = 0.5, colour = "#253494") +
#geom_circle(aes(x0 = x, y0 = y, r = r), df) +
coord_equal() + xlim(-100, 250) + ylim(-175, 325) +
theme_blankcanvas
ggplot() +
geom_segment(aes(x = x, xend = xend, y = y, yend = yend), edges %>% filter (x != xend),
size = 0.35, colour = "white") +
#geom_point(aes(x, y), edges %>% filter (x != xend), size = 0.5, colour = "#253494") +
#geom_circle(aes(x0 = x, y0 = y, r = r), df) +
coord_equal() + xlim(-100, 250) + ylim(-175, 325) +
theme_blankcanvas + theme(plot.background = element_rect(fill = "black"))
ggplot() +
geom_segment(aes(x = x, xend = xend, y = y, yend = yend), edges %>% filter (x != xend),
size = 0.35, colour = "white") +
#geom_point(aes(x, y), edges %>% filter (x != xend), size = 0.5, colour = "#253494") +
#geom_circle(aes(x0 = x, y0 = y, r = r), df) +
coord_equal() + xlim(-100, 250) + ylim(-175, 325) +
theme_blankcanvas + theme(plot.background = element_rect(fill = "black")) + coord_polar()
ggplot() +
geom_segment(aes(x = x, xend = xend, y = y, yend = yend), edges %>% filter (x != xend),
size = 0.35, colour = "black") +
#geom_point(aes(x, y), edges %>% filter (x != xend), size = 0.5, colour = "#253494") +
#geom_circle(aes(x0 = x, y0 = y, r = r), df) +
coord_equal() + xlim(-100, 250) + ylim(-175, 325) +
theme_blankcanvas + theme(plot.background = element_rect(fill = "lightgray")) + coord_polar()
ggplot() +
geom_segment(aes(x = x, xend = xend, y = y, yend = yend), edges %>% filter (x != xend),
size = 0.35, colour = "white") +
#geom_point(aes(x, y), edges %>% filter (x != xend), size = 0.5, colour = "#253494") +
#geom_circle(aes(x0 = x, y0 = y, r = r), df) +
coord_equal() + xlim(-100, 250) + ylim(-175, 325) +
theme_blankcanvas + theme(plot.background = element_rect(fill = "black")) + coord_polar()
# save plot ----
ggsave("genbrain-multi-5.png", width = 24, height = 24, units = "cm", dpi = 300)
tmp <- installed.packages()
installedpkgs <- as.vector(tmp[is.na(tmp[,"Priority"]), 1])
save(installedpkgs, file="installed_old.rda")
load("installed_old.rda")
tmp <- installed.packages()
installedpkgs.new <- as.vector(tmp[is.na(tmp[,"Priority"]), 1])
missing <- setdiff(installedpkgs, installedpkgs.new)
install.packages(missing)
chooseBioCmirror()
install.packages(c("digest", "Matrix", "mgcv", "nlme", "survival"))
# Load packages
library(ggart)
library(ggthemes)
library(viridis)
library(tidyverse)
set.seed(101)
# Parameters
make_tree <- function(depth = 10, angle = 25, L = 0.8, jitter = 0) {
branches <- rbind(c(1, 0, 0, abs(jitter(0)), 1, jitter(0, amount = 0)), data.frame())
colnames(branches) <- c("depth", "x1", "y1", "x2", "y2", "inertia")
for(i in 1:depth) {
df <- branches[branches$depth==i,]
for(j in 1:nrow(df)) {
branches <- rbind(branches, c(df[j,1]+1,
df[j,4],
df[j,5],
df[j,4]+L^(2*i+1)*sin(pi*(df[j,6]+angle)/180),
df[j,5]+L^(2*i+1)*cos(pi*(df[j,6]+angle)/180),
df[j,6]+angle+jitter(0, amount = jitter)))
branches <- rbind(branches, c(df[j,1]+1,
df[j,4],
df[j,5],
df[j,4]+L^(2*i+1)*sin(pi*(df[j,6]-angle)/180),
df[j,5]+L^(2*i+1)*cos(pi*(df[j,6]-angle)/180),
df[j,6]-angle+jitter(0, amount = jitter)))
}
}
branches
}
n <- 100
depths <- round(runif(n, 7, 11))
angles <- round(runif(n, 5, 25))
lengths <- round(runif(n, 0.9, 0.95))
jitters <- round(runif(n, 1, 100))
df <- pmap_df(list(depth = depths, angle = angles, L = lengths, jitter = jitters), make_tree, .id = "id")
p <- ggplot() +
geom_segment(aes(x = x1, xend = x2, y = y1, yend = y2, size = depth,
alpha = depth), df, lineend = "round") +
scale_colour_gradient(low = "black", high = "purple") +
scale_alpha_continuous(range = c(0.1, 0.05)) +
scale_size_continuous(range = c(1*100/n, 0.25*100/n)) +
#facet_wrap(~id, nrow = sqrt(n), scales = "free") +
coord_equal() +
theme_blankcanvas() +
theme(plot.margin = unit(c(2, 2, 2, 2), units = "cm"))
ggsave("fractaltree-5.png", p, width = 594, height = 594, units = c("mm"))
p <- ggplot() +
geom_segment(aes(x = x1, xend = x2, y = y1, yend = y2, size = depth,
alpha = depth), df, lineend = "round") +
scale_colour_gradient(low = "black", high = "purple") +
scale_alpha_continuous(range = c(0.2, 0.2)) +
scale_size_continuous(range = c(1*100/n, 0.25*100/n)) +
#facet_wrap(~id, nrow = sqrt(n), scales = "free") +
coord_equal() +
theme_blankcanvas() +
theme(plot.margin = unit(c(2, 2, 2, 2), units = "cm"))
ggsave("fractaltree-5.png", p, width = 594, height = 594, units = c("mm"))
p <- ggplot() +
geom_segment(aes(x = x1, xend = x2, y = y1, yend = y2, size = depth,
alpha = depth), df, lineend = "round") +
scale_colour_gradient(low = "black", high = "purple") +
scale_alpha_continuous(range = c(0.2, 0.1)) +
scale_size_continuous(range = c(1*100/n, 0.25*100/n)) +
#facet_wrap(~id, nrow = sqrt(n), scales = "free") +
coord_equal() +
theme_blankcanvas() +
theme(plot.margin = unit(c(2, 2, 2, 2), units = "cm"))
ggsave("fractaltree-5.png", p, width = 594, height = 594, units = c("mm"))
p <- ggplot() +
geom_segment(aes(x = x1, xend = x2, y = y1, yend = y2, size = depth,
alpha = depth), df, lineend = "round") +
scale_colour_gradient(low = "black", high = "purple") +
scale_alpha_continuous(range = c(0.2, 0.1)) +
scale_size_continuous(range = c(2*100/n, 0.25*100/n)) +
#facet_wrap(~id, nrow = sqrt(n), scales = "free") +
coord_equal() +
theme_blankcanvas() #+
#theme(plot.margin = unit(c(2, 2, 2, 2), units = "cm"))
ggsave("fractaltree-5.png", p, width = 594, height = 594, units = c("mm"))
# Load packages
library(ggart)
library(ggthemes)
library(viridis)
library(tidyverse)
set.seed(101)
# Parameters
make_tree <- function(depth = 10, angle = 25, L = 0.8, jitter = 0) {
branches <- rbind(c(1, 0, 0, abs(jitter(0)), 1, jitter(0, amount = 0)), data.frame())
colnames(branches) <- c("depth", "x1", "y1", "x2", "y2", "inertia")
for(i in 1:depth) {
df <- branches[branches$depth==i,]
for(j in 1:nrow(df)) {
branches <- rbind(branches, c(df[j,1]+1,
df[j,4],
df[j,5],
df[j,4]+L^(2*i+1)*sin(pi*(df[j,6]+angle)/180),
df[j,5]+L^(2*i+1)*cos(pi*(df[j,6]+angle)/180),
df[j,6]+angle+jitter(0, amount = jitter)))
branches <- rbind(branches, c(df[j,1]+1,
df[j,4],
df[j,5],
df[j,4]+L^(2*i+1)*sin(pi*(df[j,6]-angle)/180),
df[j,5]+L^(2*i+1)*cos(pi*(df[j,6]-angle)/180),
df[j,6]-angle+jitter(0, amount = jitter)))
}
}
branches
}
n <- 100
depths <- round(runif(n, 7, 11))
angles <- round(runif(n, 20, 25))
lengths <- round(runif(n, 0.9, 0.95))
jitters <- round(runif(n, 1, 100))
df <- pmap_df(list(depth = depths, angle = angles, L = lengths, jitter = jitters), make_tree, .id = "id")
p <- ggplot() +
geom_segment(aes(x = x1, xend = x2, y = y1, yend = y2, size = depth,
alpha = depth), df, lineend = "round") +
scale_colour_gradient(low = "black", high = "purple") +
scale_alpha_continuous(range = c(0.2, 0.1)) +
scale_size_continuous(range = c(2*100/n, 0.25*100/n)) +
#facet_wrap(~id, nrow = sqrt(n), scales = "free") +
coord_equal() +
theme_blankcanvas() #+
#theme(plot.margin = unit(c(2, 2, 2, 2), units = "cm"))
ggsave("fractaltree-5.png", p, width = 594, height = 594, units = c("mm"))
# Load packages
library(ggart)
library(ggthemes)
library(viridis)
library(tidyverse)
set.seed(101)
# Parameters
make_tree <- function(depth = 10, angle = 25, L = 0.8, jitter = 0) {
branches <- rbind(c(1, 0, 0, abs(jitter(0)), 1, jitter(0, amount = 0)), data.frame())
colnames(branches) <- c("depth", "x1", "y1", "x2", "y2", "inertia")
for(i in 1:depth) {
df <- branches[branches$depth==i,]
for(j in 1:nrow(df)) {
branches <- rbind(branches, c(df[j,1]+1,
df[j,4],
df[j,5],
df[j,4]+L^(2*i+1)*sin(pi*(df[j,6]+angle)/180),
df[j,5]+L^(2*i+1)*cos(pi*(df[j,6]+angle)/180),
df[j,6]+angle+jitter(0, amount = jitter)))
branches <- rbind(branches, c(df[j,1]+1,
df[j,4],
df[j,5],
df[j,4]+L^(2*i+1)*sin(pi*(df[j,6]-angle)/180),
df[j,5]+L^(2*i+1)*cos(pi*(df[j,6]-angle)/180),
df[j,6]-angle+jitter(0, amount = jitter)))
}
}
branches
}
n <- 100
depths <- round(runif(n, 7, 11))
angles <- round(runif(n, 20, 25))
lengths <- round(runif(n, 0.7, 0.95))
jitters <- round(runif(n, 1, 50))
df <- pmap_df(list(depth = depths, angle = angles, L = lengths, jitter = jitters), make_tree, .id = "id")
p <- ggplot() +
geom_segment(aes(x = x1, xend = x2, y = y1, yend = y2, size = depth,
alpha = depth), df, lineend = "round") +
scale_colour_gradient(low = "black", high = "purple") +
scale_alpha_continuous(range = c(0.2, 0.1)) +
scale_size_continuous(range = c(2*100/n, 0.25*100/n)) +
#facet_wrap(~id, nrow = sqrt(n), scales = "free") +
coord_equal() +
theme_blankcanvas() #+
#theme(plot.margin = unit(c(2, 2, 2, 2), units = "cm"))
ggsave("fractaltree-5.png", p, width = 594, height = 594, units = c("mm"))
setwd("~/Dropbox/mathart/10000pts")
# Rapidly-exploring random tree
# https://en.wikipedia.org/wiki/Rapidly-exploring_random_tree
# Load packages
library(ggart)
library(steiner)
library(tidyverse)
# Make reproducible
set.seed(10000)
# Set parameters
n <- 100000 # Number of iterations
X <- 10000 # Square canvas dimension
delta <- 12.5
# Create data frame
points <- data.frame(x = numeric(n), y = numeric(n))
points[1, ] <- runif(2, 0, X)
edges <- data.frame(x = numeric(n), y = numeric(n), xend = numeric(n), yend = numeric(n))
edges[1, ] <- c(as.numeric(points[1, ]), as.numeric(points[1, ]))
# Main loop
i <- 2
while(i <= n) {
valid <- FALSE
while(!valid) {
# Sample a random point
rp <- runif(2, 0, X)
# Find the nearest neighbour to rp
temp <- points[1:(i-1), ] %>%
mutate(dist = sqrt((rp[1] - x)^2 + (rp[2] - y)^2)) %>%
arrange(dist)
np <- as.numeric(temp[1, c("x", "y")])
# Limit the maximum edge length
if(temp$dist[1] > delta) {
rp2 <- np + (rp - np) / temp$dist[1] * delta
rp <- rp2
}
# Check if the line segment between rp and np intersects an existing edge
temp2 <- edges[1:(i-1), ] %>%
mutate(intersects = does_intersect(rp, np, c(x, y), c(xend, yend)))
if(sum(temp2$intersects) <= 0) {
points[i, ] <- rp
edges[i, ] <- c(np, rp)
valid <- TRUE
}
}
i <- i + 1
print(i)
}
# Create plot
ggplot() +
geom_segment(aes(x, y, xend = xend, yend = yend), edges, lineend = "round", size = 0.3) +
xlim(0, 10000) +
ylim(0, 10000) +
coord_equal() +
theme_blankcanvas(margin_cm = 0)
# Save plot
ggsave(paste("plots/rrt_delta", delta, ".png", sep = ""), width = 20, height = 20, units = "cm", dpi = 720)
# Rapidly-exploring random tree
# https://en.wikipedia.org/wiki/Rapidly-exploring_random_tree
# Load packages
library(ggart)
library(steiner)
library(tidyverse)
# Make reproducible
set.seed(10000)
# Set parameters
n <- 100000 # Number of iterations
X <- 10000 # Square canvas dimension
delta <- 2
# Create data frame
points <- data.frame(x = numeric(n), y = numeric(n))
points[1, ] <- runif(2, 0, X)
edges <- data.frame(x = numeric(n), y = numeric(n), xend = numeric(n), yend = numeric(n))
edges[1, ] <- c(as.numeric(points[1, ]), as.numeric(points[1, ]))
# Main loop
i <- 2
while(i <= n) {
valid <- FALSE
while(!valid) {
# Sample a random point
rp <- runif(2, 0, X)
# Find the nearest neighbour to rp
temp <- points[1:(i-1), ] %>%
mutate(dist = sqrt((rp[1] - x)^2 + (rp[2] - y)^2)) %>%
arrange(dist)
np <- as.numeric(temp[1, c("x", "y")])
# Limit the maximum edge length
if(temp$dist[1] > delta) {
rp2 <- np + (rp - np) / temp$dist[1] * delta
rp <- rp2
}
# Check if the line segment between rp and np intersects an existing edge
temp2 <- edges[1:(i-1), ] %>%
mutate(intersects = does_intersect(rp, np, c(x, y), c(xend, yend)))
if(sum(temp2$intersects) <= 0) {
points[i, ] <- rp
edges[i, ] <- c(np, rp)
valid <- TRUE
}
}
i <- i + 1
print(i)
}
# Rapidly-exploring random tree
# https://en.wikipedia.org/wiki/Rapidly-exploring_random_tree
# Load packages
library(ggart)
library(steiner)
library(tidyverse)
# Make reproducible
set.seed(10000)
# Set parameters
n <- 1000000 # Number of iterations
X <- 10000 # Square canvas dimension
delta <- 2
# Create data frame
points <- data.frame(x = numeric(n), y = numeric(n))
points[1, ] <- runif(2, 0, X)
edges <- data.frame(x = numeric(n), y = numeric(n), xend = numeric(n), yend = numeric(n))
edges[1, ] <- c(as.numeric(points[1, ]), as.numeric(points[1, ]))
# Main loop
i <- 2
while(i <= n) {
valid <- FALSE
while(!valid) {
# Sample a random point
rp <- runif(2, 0, X)
# Find the nearest neighbour to rp
temp <- points[1:(i-1), ] %>%
mutate(dist = sqrt((rp[1] - x)^2 + (rp[2] - y)^2)) %>%
arrange(dist)
np <- as.numeric(temp[1, c("x", "y")])
# Limit the maximum edge length
if(temp$dist[1] > delta) {
rp2 <- np + (rp - np) / temp$dist[1] * delta
rp <- rp2
}
# Check if the line segment between rp and np intersects an existing edge
temp2 <- edges[1:(i-1), ] %>%
mutate(intersects = does_intersect(rp, np, c(x, y), c(xend, yend)))
if(sum(temp2$intersects) <= 0) {
points[i, ] <- rp
edges[i, ] <- c(np, rp)
valid <- TRUE
}
}
i <- i + 1
print(i)
}
ggplot() +
geom_segment(aes(x, y, xend = xend, yend = yend), edges, lineend = "round", size = 0.3) +
xlim(0, 10000) +
ylim(0, 10000) +
coord_equal() +
theme_blankcanvas(margin_cm = 0)
# Save plot
ggsave(paste("plots/rrt_delta", delta, ".png", sep = ""), width = 20, height = 20, units = "cm", dpi = 720)
ggplot() +
geom_segment(aes(x, y, xend = xend, yend = yend), edges, lineend = "round", size = 0.3, colour = "white") +
xlim(0, 10000) +
ylim(0, 10000) +
coord_equal() +
theme_blankcanvas(margin_cm = 0, bg_col = "black")
# Save plot
ggsave(paste("plots/rrt_delta_", delta, ".png", sep = ""), width = 20, height = 20, units = "cm", dpi = 720)
saveRDS(edges, "edges.RDS")
