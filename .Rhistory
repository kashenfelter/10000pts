install.packages(c("irlba", "readr", "tibble"))
install.packages(c("hunspell", "irlba", "knitr", "readr", "rlang", "tibble"))
install.packages("hunspell")
install.packages(c("hunspell", "Rcpp"))
library(steiner)
test <- generate_obstacle(n = 25)
library(deldir)
test <- generate_obstacle(n = 25)
library(tidyverse)
test <- generate_obstacle(n = 25)
test$points
test$points$x
ggplot() + geom_polygon(aes(x, y), test$points)
test$points$y
360/12
setwd("C:/Users/mvolz/Dropbox/mathart/10000pts")
library(deldir)
library(ggart)
library(pts10000)
library(tidyverse)
# Points ----
points <- pts10000::points
p <- ggplot() +
geom_point(aes(x, y), points, size = 1) +
coord_equal() +
xlim(0, 10000) +
ylim(0, 10000) +
theme_blankcanvas(margin_cm = 0)
View(points)
a <- c(1, 4)
b <- c(2, 3)
sqrt((1 - 2)^2 + (4 - 3)^2)
sum((a - b)^2)
sqrt(sum((a - b)^2))
result <- data.frame(x = numeric(0), y = numeric(0), xend = numeric(0), yend = numeric(0))
for(i in seq(1, nrow(points) - 1)) {
for(j in seq(i + 1, nrow(points))) {
d <- sqrt(sum((points[i, ] - points[j, ])^2))
temp <- points %>% mutate(di = sqrt((x - points$x[i])^2 + (y - points$y[i])^2),
dj = sqrt((x - points$x[j])^2 + (y - points$y[j])^2))
if(max(temp[, c("di", "dj")]) > d) {
result <- rbind(result, c(points$x[i], points$y[i], points$x[j], points$y[j]))
}
}
print(i)
}
result <- data.frame(x = numeric(0), y = numeric(0), xend = numeric(0), yend = numeric(0))
for(i in seq(1, nrow(points) - 1)) {
for(j in seq(i + 1, nrow(points))) {
d <- sqrt(sum((points[i, ] - points[j, ])^2))
temp <- points %>% mutate(di = sqrt((x - points$x[i])^2 + (y - points$y[i])^2),
dj = sqrt((x - points$x[j])^2 + (y - points$y[j])^2))
if(max(temp[, c("di", "dj")]) > d) {
result <- rbind(result, c(points$x[i], points$y[i], points$x[j], points$y[j]))
}
print(j)
}
print(i)
}
p + geom_segment(aes(x, y, xend = xend, yend = yend), result, lineend = "round")
View(result)
result <- data.frame(x = numeric(0), y = numeric(0), xend = numeric(0), yend = numeric(0))
for(i in seq(1, nrow(points) - 1)) {
for(j in seq(i + 1, nrow(points))) {
d <- sqrt(sum((points[i, ] - points[j, ])^2))
temp <- points %>% mutate(di = sqrt((x - points$x[i])^2 + (y - points$y[i])^2),
dj = sqrt((x - points$x[j])^2 + (y - points$y[j])^2))
if(max(temp[, c("di", "dj")]) > d) {
result <- rbind(result, data.frame(x = points$x[i], y = points$y[i], xend = points$x[j], yend = points$y[j]))
}
print(j)
}
print(i)
}
View(result)
result <- data.frame(x = numeric(0), y = numeric(0), xend = numeric(0), yend = numeric(0))
for(i in seq(1, nrow(points) - 1)) {
for(j in seq(i + 1, nrow(points))) {
d <- sqrt(sum((points[i, ] - points[j, ])^2))
temp <- points %>% mutate(di = sqrt((x - points$x[i])^2 + (y - points$y[i])^2),
dj = sqrt((x - points$x[j])^2 + (y - points$y[j])^2))
dimax <- max(temp$di)
djmax <- max(temp$dj)
if(d < dimax & d < djmax) {
result <- rbind(result, data.frame(x = points$x[i], y = points$y[i], xend = points$x[j], yend = points$y[j]))
}
print(j)
}
print(i)
}
row_number(points[5, ])
row.names(points[5, ])
as.integer(row.names(points[5, ]))
points[as.integer(row.names(points[5, ])), ]
points[!as.integer(row.names(points[5, ])), ]
row.names(points)
points[row.names(points), ]
points[row.names(points) != 1, ]
points[row.names(points) != 499, ]
result <- data.frame(x = numeric(0), y = numeric(0), xend = numeric(0), yend = numeric(0))
for(i in seq(1, nrow(points) - 1)) {
for(j in seq(i + 1, nrow(points))) {
d <- sqrt(sum((points[i, ] - points[j, ])^2))
temp <- points %>%
filter(row.names(.) != i & row.names(.) != j) %>%
mutate(di = sqrt((x - points$x[i])^2 + (y - points$y[i])^2),
dj = sqrt((x - points$x[j])^2 + (y - points$y[j])^2))
dimax <- max(temp$di)
djmax <- max(temp$dj)
if(d < dimax & d < djmax) {
result <- rbind(result, data.frame(x = points$x[i], y = points$y[i], xend = points$x[j], yend = points$y[j]))
}
print(j)
}
print(i)
}
p + geom_segment(aes(x, y, xend = xend, yend = yend), result, lineend = "round")
result <- data.frame(x = numeric(0), y = numeric(0), xend = numeric(0), yend = numeric(0))
for(i in seq(1, nrow(points) - 1)) {
for(j in seq(i + 1, nrow(points))) {
d <- sqrt(sum((points[i, ] - points[j, ])^2))
temp <- points %>%
filter(row.names(.) != i & row.names(.) != j) %>%
mutate(di = sqrt((x - points$x[i])^2 + (y - points$y[i])^2),
dj = sqrt((x - points$x[j])^2 + (y - points$y[j])^2))
dimin <- min(temp$di)
djmin <- min(temp$dj)
if(d < dimax & d < djmax) {
result <- rbind(result, data.frame(x = points$x[i], y = points$y[i], xend = points$x[j], yend = points$y[j]))
}
print(j)
}
print(i)
}
p + geom_segment(aes(x, y, xend = xend, yend = yend), result, lineend = "round")
View(temp)
result <- data.frame(x = numeric(0), y = numeric(0), xend = numeric(0), yend = numeric(0))
for(i in seq(1, nrow(points) - 1)) {
for(j in seq(i + 1, nrow(points))) {
d <- sqrt(sum((points[i, ] - points[j, ])^2))
temp <- points %>%
filter(row.names(.) != i & row.names(.) != j) %>%
mutate(di = sqrt((x - points$x[i])^2 + (y - points$y[i])^2),
dj = sqrt((x - points$x[j])^2 + (y - points$y[j])^2))
dimin <- min(temp$di)
djmin <- min(temp$dj)
if(d < dimin & d < djmin) {
result <- rbind(result, data.frame(x = points$x[i], y = points$y[i], xend = points$x[j], yend = points$y[j]))
}
print(j)
}
print(i)
}
p + geom_segment(aes(x, y, xend = xend, yend = yend), result, lineend = "round")
result <- data.frame(x = numeric(0), y = numeric(0), xend = numeric(0), yend = numeric(0))
for(i in seq(1, nrow(points) - 1)) {
for(j in seq(i + 1, nrow(points))) {
d <- sqrt(sum((points[i, ] - points[j, ])^2))
temp <- points %>%
filter(row.names(.) != i & row.names(.) != j) %>%
mutate(di = sqrt((x - points$x[i])^2 + (y - points$y[i])^2),
dj = sqrt((x - points$x[j])^2 + (y - points$y[j])^2))
dimin <- min(temp$di)
djmin <- min(temp$dj)
if(d < dimin & d < djmin) {
result <- rbind(result, data.frame(x = points$x[i], y = points$y[i], xend = points$x[j], yend = points$y[j]))
}
print(j)
}
print(i)
}
p + geom_segment(aes(x, y, xend = xend, yend = yend), result, lineend = "round")
install.packages("cccd")
library(cccd)
x <- matrix(runif(100),ncol=2)
View(x)
g <- rng(x)
str(g)
plot(g)
View(x)
test <- as.matrix(points)
test
View(test)
g <- rng(x)
g <- rng(test)
library(cccd)
